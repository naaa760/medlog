generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id
  email         String       @unique
  name          String?
  username      String?      @unique
  bio           String?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  posts         Post[]
  comments      Comment[]
  bookmarks     Bookmark[]
  claps         Clap[]
  followedBy    Follow[]     @relation("Follower")
  following     Follow[]     @relation("Following")
}

model Post {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  subtitle    String?
  content     String
  coverImage  String?
  published   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  authorId    String
  
  // Relations
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  bookmarks   Bookmark[]
  claps       Clap[]
  tags        PostTag[]

  @@index([authorId])
}

model Comment {
  id              String      @id @default(cuid())
  content         String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  authorId        String
  postId          String
  parentId        String?
  
  // Relations
  author          User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post            Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent          Comment?    @relation("CommentToComment", fields: [parentId], references: [id], onDelete: SetNull)
  replies         Comment[]   @relation("CommentToComment")

  @@index([authorId])
  @@index([postId])
  @@index([parentId])
}

model Tag {
  id          String      @id @default(cuid())
  name        String      @unique
  slug        String      @unique
  
  // Relations
  posts       PostTag[]
}

model PostTag {
  postId      String
  tagId       String
  
  // Relations
  post        Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag         Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@index([postId])
  @@index([tagId])
}

model Bookmark {
  userId      String
  postId      String
  createdAt   DateTime    @default(now())
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post        @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Clap {
  userId      String
  postId      String
  count       Int         @default(1)
  createdAt   DateTime    @default(now())
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post        @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Follow {
  followerId  String
  followingId String
  createdAt   DateTime    @default(now())
  
  // Relations
  follower    User        @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User        @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
} 